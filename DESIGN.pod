=head1 DECIDED BEHAVIOUR

=head2 Name

C<autodie> is the name of the pragma.  Thanks to Jured for the
suggestion.  This won out over the very many other names suggested
on p5p (March 2008).

=head2 Perl Version

Currently C<autodie> works in Perl 5.10.  I'd like it to work in
Perl 5.8, but I haven't yet wrapped my head around how to have
lexical pragamata in 5.8 work as intended, although L<autobox>
is a good example.  Patches welcome.

=head2 :lexical switch to Fatal

The C<:lexical> switch is used internally, but should not be
used by the end-user.  This restriction is not currently
enforced.

=head2 :void switch and autodie

C<:void> retains its existing behaviour in C<Fatal>.  C<:void>
is not allowed with C<autodie>.  Even though we could trivially
support it, p5p decided it would be very confusing.

=head2 Interactions between Fatal and autodie

The following conditions are considered errors (and are
enforced by the code):

=over 4

=item C<no Fatal>

=item C<no autodie> when C<use Fatal> is in effect for the same sub

=back

=head2 no autodie

A plain:

    no autodie;

turns off all C<autodie> behaviour with the current lexical
scope.  It is not allowed if any form of C<Fatal> is in
effect.

=head1 OPEN QUESTIONS

=head2 Vanilla autodie

The vanilla form:

    use autodie;

is presently (June 2008) open for discussion.  PJF's opinion
is that it should be the same as:

    use autodie qw(:all);

enabling the pragma for all built-ins for which it makes sense
to do so.  It should be noted that this list may increase in
later versions of the module.

=head1 BUGS

=over 4

=item Package and lexical interaction

Due to the way the code operates, C<autodie> only changes the
bavhiour of subroutines within the same lexical scope
I<provided they are in the same package>.  This means that
the second open is not checked in the following code:

    {
        package Foo;

        use autodie qw(open);

        open(my $fh1, '<', $some_file);     # autodying

        package Bar;

        open(my $fh2, '<', $some_file);     # not autodying

    }

=item Exotic system

Under the proposed C<system> additions, the exotic form of
system becomes a syntax error:

    system { $cmd } @list;

It can still be invoked with:

    CORE::system { $cmd } @list;

Although this form is not checked for failure.

=back
